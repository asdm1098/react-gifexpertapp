{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFechGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAuCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAqBvC,OACI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OASf,2BACKO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,Y,uBCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGdC,EAHc,iDAGmCC,UAAWH,GAH9C,+DAIDI,MAAOF,GAJN,cAIdG,EAJc,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZtB,kBAebM,GAfa,4CAAH,sDCYLO,EAZK,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAG3B,OAEI,yBAAKc,UAAY,6CACb,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,+BAAKA,EAAL,OC2BGO,EA9BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAAEA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAuBvC,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMtB,CAACpB,IAGGqB,EDnB2BK,CAAc1B,GAAlCa,EAFgB,EAEtBN,KAAca,EAFQ,EAERA,QAItB,OAFAO,QAAQC,IAAIR,GAGR,oCACI,wBAAIJ,UAAU,wCAAyChB,GAErDoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAIPH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAmB,IAAMnB,EAAIC,IACJD,UESfoB,EA9BM,WAAO,IAAD,EAEa5C,mBAAS,CAAC,sBAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAUvB,OAEI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ8C,EAAWtB,KAAK,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACA6B,IAAM7B,EACNA,SAAWA,UCnBpCgC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.8b4ed119.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ( {setCategories} ) => { //recibimos la propiedad setCategories del componente Padre\r\n   \r\n    const [inputValue, setInputValue] = useState(''); //asignamos valor vacio inicial\r\n\r\n    const handleInputChange = (e) => {   //recogemos los cambios del evento Onchange del input\r\n\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) =>{    //recogemos el evento submit del form pero cancelamos el event default de recargar la pagina\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ){    //La longitud del valor ingreso debe ser mayor a 2 letras\r\n            setCategories( cats => [inputValue, ...cats] );  //llamamos la propiedad padre para comunicarlo con el valor del input de este component\r\n            setInputValue(''); //vaciamos la caja de texto\r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n\r\n    return (  //evento de guar cambios\r\n        <form onSubmit = { handleSubmit }>  \r\n           <input \r\n                type=\"text\"\r\n                value={ inputValue }  //valor inicial vacio\r\n                onChange={ handleInputChange }   //se ejecuta cada que la caja de texto cambie \r\n           /> \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={  //propiedad requerida\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\n\r\nexport const getGifs = async( category ) => {        \r\n\r\n    //Peticion Http para traer imagenes que corresponde a esa categoria\r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) }&limit=10&api_key=CLeduAh46qNY06ZrxUqt7OddMTSmgUBq`;\r\n   const resp = await fetch( url );\r\n   const { data } = await resp.json();\r\n\r\n   //info resp gifts\r\n   const gifs = data.map( img => {\r\n       return{\r\n           id: img.id,\r\n           title: img.title,\r\n           url: img.images?.downsized_medium.url,\r\n       }\r\n   })\r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ( { title, url } ) => {\r\n\r\n\r\n    return (\r\n\r\n        <div className = \"card animate__animated animate__headShake\">\r\n            <img src={ url } alt={ title } />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFechGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\n//Coleccion de elementos que van a coincidir con la categoria  \r\n\r\nconst GifGrid = ({ category }) => { //recibo categoria y hago peticion http\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n    \r\n    console.log(loading);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__headShake\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                        key={ img.id }\r\n                        { ... img }\r\n                        />\r\n                    ))\r\n\r\n                    }\r\n                \r\n            </div>      \r\n        </>       \r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () =>{       //Solo se ejecute cuando cambie la categoria\r\n\r\n        getGifs( category )  //Hace la peticion Http\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            })\r\n        \r\n\r\n    }, [category])\r\n\r\n    \r\n    return state; //{data:[], loading: true};\r\n\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Nanatsu no Taizai']);\r\n\r\n    /*\r\n    const nuevo = 'Death Note';\r\n    const handleAdd = ()=>{\r\n        setCategories( [...categories, `${nuevo}`] );        \r\n    }*/\r\n    \r\n    return (\r\n\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                         <GifGrid \r\n                         key={ category }\r\n                         category= {category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}